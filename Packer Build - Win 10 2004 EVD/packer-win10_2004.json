{
  "variables": {
    "client_id": "",
    "client_secret": "",
    "AppInstallsStorageAccountName": "",
    "AppInstallsStorageAccountKey": "",
    
    "wvd_goldimage_rg": "{{env `wvd_goldimage_rg`}}",
    "az_tenant_id": "{{env `az_tenant_id`}}",
    "subscription_id": "{{env `ARM_SUBSCRIPTION_ID`}}",

    "packaged_app_installs_path": "{{env `packaged_app_installs_path`}}",

    "Build_DefinitionName": "{{env `Build_DefinitionName`}}",
    "Build_BuildNumber": "{{env `Build_BuildNumber`}}"
  },
  "builders": [
    {
      "type": "azure-arm",
        
      "client_id": "{{user `client_id`}}",
      "client_secret": "{{user `client_secret`}}",
      "tenant_id": "{{user `az_tenant_id`}}",
      "subscription_id": "{{user `subscription_id`}}",

      "os_type": "Windows",
      "managed_image_name": "{{user `Build_DefinitionName` | clean_image_name}}-{{isotime \"2006-01-02-1504\"}}-Build{{user `Build_BuildNumber`}}",
      "managed_image_resource_group_name": "{{user `wvd_goldimage_rg`}}",
      
      "image_publisher": "MicrosoftWindowsDesktop",
      "image_offer": "Windows-10",
      "image_sku": "20h1-evd-o365pp",
      "communicator": "winrm",
      "winrm_use_ssl": "true",
      "winrm_insecure": "true",
      "winrm_timeout": "3m",
      "winrm_username": "packer",

      "managed_image_storage_account_type": "Premium_LRS",
      "temp_resource_group_name": "PackerBuild-Temp",
      "virtual_network_name": "vNet-PackerImage",
      "virtual_network_subnet_name": "Subnet-PackerImage",
      "private_virtual_network_with_public_ip": "True",
      "virtual_network_resource_group_name": "Packer-Build",
      "azure_tags": {
          "Project": "Packer IT Image"
      },
      
      "location": "North Europe",
      "vm_size": "Standard_B2S",

      "async_resourcegroup_delete":true
    }
  ],
  "provisioners": [
    {
      "type": "powershell",
      "inline": [
          "$ErrorActionPreference='Stop'",

          "Invoke-Expression ((New-Object -TypeName net.webclient).DownloadString('https://chocolatey.org/install.ps1'))",
          "& choco feature enable -n allowGlobalConfirmation",
          "Write-Host \"Chocolatey Installed.\""
      ]
    },
    {
      "type": "powershell",
      "inline": [
          "$ErrorActionPreference='Stop'",

          "Import-Module -Name Smbshare -Force -Scope Local",
          "$Usr='AzureAD\\'+\"{{user `AppInstallsStorageAccountName`}}\"",
          "New-SmbMapping -LocalPath J: -RemotePath \"{{user `packaged_app_installs_path`}}\" -Username \"$Usr\" -Password \"{{user `AppInstallsStorageAccountKey`}}\"",
          "Write-Host \"'J:' drive mapped\"",

          "Set-MpPreference -DisableRealtimeMonitoring $true",
          "Write-Host \"Defender RealTime scanning temporarily disabled\"",

          "& \"J:\\Notepadpluspls\\notepadplusplus.cmd\"",
          "Write-Host \"'Notepad\\7.7.1' installed\"",

          "& \"J:\\GoldImage\\InstallApps.cmd\"",
          "Write-Host \"'AllApps' installed\"",
         
          "& \"J:\\GoldImage\\InstallApps.cmd\"",
          "Write-Host \"'AllApps' installed\""
          
      ]
    },
    {
      "type": "powershell",
      "inline": [
        " # NOTE: the following *3* lines are only needed if the you have installed the Guest Agent.",
        "  while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "  while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
        "  while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",

        "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}",
        "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
      ]
    }
  ]
}